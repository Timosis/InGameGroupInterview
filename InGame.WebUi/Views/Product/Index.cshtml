@model InGame.WebUi.Models.ProductVm
@{
    ViewData["Title"] = "Index";
    var asyncSettings = new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = @Url.Content("~/Product/Create")};
}

<!-- begin:: Subheader -->
<div class="kt-subheader   kt-grid__item" id="kt_subheader">
    <div class="kt-container  kt-container--fluid ">
        <div class="kt-subheader__main">
            <h3 class="kt-subheader__title">
                Products
            </h3>
        </div>
        <div class="kt-subheader__toolbar">
            <div class="kt-subheader__wrapper">
                <ejs-button id="addProduct" cssClass="btn btn-brand" content="Add Product"></ejs-button>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-12 control-section" id="target">
    <div id="container" style="height:500px;">
        <ejs-dialog id="dialog" width="500px" target="#container" showCloseIcon="true" visible="false" header="Add A New Product">
            <e-dialog-animationsettings effect="Zoom"></e-dialog-animationsettings>
            <e-content-template>
                <form id="addProductFrom" method="post" asp-controller="Product" asp-action="Create">
                    <div class='form-group'>
                        <input id="productCategoryId" type="hidden" asp-for="CategoryId" />
                        <ejs-dropdownlist id="productCategory" open="open" placeholder="Select Category" noRecordsTemplate="<div id='tree'></div>">
                        </ejs-dropdownlist>
                    </div>
                    <div class='form-group'>
                        <ejs-textbox id="productName" ejs-for="Name" placeholder="Product Name" floatLabelType="Auto"></ejs-textbox>
                    </div>
                    <div class='form-group'>
                        <ejs-textbox id="productDescription" ejs-for="Description" placeholder="Description" floatLabelType="Auto"></ejs-textbox>
                    </div>
                    <div class='form-group'>
                        <ejs-numerictextbox id="productCurrency" ejs-for="Price" format="c2" value="20" Type="text"></ejs-numerictextbox>
                    </div>
                    <div class='form-group'>
                        <ejs-uploader id="UploadFiles" removing="onFileRemove" dropArea=".control-fluid" asyncSettings="@asyncSettings">
                        </ejs-uploader>
                    </div>
                </form>
            </e-content-template>
            <e-dialog-buttons>
                <e-dialog-dialogbutton buttonModel="ViewBag.saveButton" click="saveBtnClick"></e-dialog-dialogbutton>
                <e-dialog-dialogbutton buttonModel="ViewBag.cancelButton" click="cancelBtnClick"></e-dialog-dialogbutton>
            </e-dialog-buttons>
        </ejs-dialog>
    </div>
</div>


<script>

    var value = document.getElementById('value');
    var text = document.getElementById('text');

    function saveBtnClick () {
        $( "#addProductFrom" ).submit();
    }

    function cancelBtnClick () {
        document.getElementById('dialog').ej2_instances[0].hide();
    }


    function onCreated() {
      var dialogObj = document.getElementById("dialog").ej2_instances[0];
      dialogObj.hide();
   }


    document.getElementById('addProduct').onclick = function () {
            var dialog = document.getElementById("dialog").ej2_instances[0];
            dialog.show();
    }

     function onFileRemove(args) {
            args.postRawFile = false;
     }
     var dropElement = document.getElementsByClassName('control-fluid')[0];
        function onChange (args) {
            var uploadObj = document.getElementById("productImage")
            uploadObj.ej2_instances[0].autoUpload = args.checked;
            uploadObj.ej2_instances[0].clearAll();
        }
        function onChanged(args) {
            var uploadObj = document.getElementById("productImage")
            uploadObj.ej2_instances[0].sequentialUpload = args.checked;
            uploadObj.ej2_instances[0].clearAll();
        }


    var isDropDownFilled = false;
    function open() {
        if (!isDropDownFilled) {
            isDropDownFilled = true;
            $.ajax({
            type: "GET",
            url: "@Url.Action("FillDropDownWithCategories", "Category")", // <-- Where should this point?
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
             var treeObj;
             var dropdownObj = document.getElementById("productCategory").ej2_instances[0];
             dropdownObj.popupObj.element.firstElementChild.className = "e-content overflow";
               // rendering the treeview only on first time
              if (treeObj == null || treeObj == undefined) {
                    debugger;
                  treeObj = new ej.navigations.TreeView({
                      fields: {
                          dataSource: response.result,
                          id: 'id',
                          parentID: 'parentId',
                          text: 'categoryName',
                          hasChildren: 'hasChild'
                      },
                      // use the nodeselected event to add the text to dropdown's input element.
                      nodeSelected: function (args) {
                          debugger;
                          dropdownObj.inputElement.value = args.nodeData.text;
                          document.getElementById("productCategoryId").value = args.nodeData.id;
                      }
                  });
                  debugger;
                  treeObj.appendTo('#tree');
              }
            }
           });
        }
    }
</script>
<style>

    .control_wrapper {
        max-width: 400px;
        margin: auto;
    }

    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
    }

    .control_wrapper .e-upload .e-upload-drag-hover {
        margin: 0;
    }

    .overflow {
        overflow: auto;
    }


    .control-section {
        padding-left: 10px;
    }

    #target {
        height: 100%;
        min-height: 350px;
    }

    #modal_dialog {
        margin: 20px;
    }

    .row {
        padding: 10px 3px;
    }
</style>

